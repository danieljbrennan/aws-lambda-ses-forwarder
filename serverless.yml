service: Resources
frameworkVersion: '3'

params:
  default:
    bucket: 16-g-mail-test
    region: us-east-1

provider:
  name: aws
  runtime: nodejs18.x
  region: ${param:region}
  stage: prod
  iam:
    role:
      Fn::GetAtt:
        - IAMRole
        - Arn
  deploymentBucket:
    name: sls-deployment-${aws:accountId}-${param:region}

functions:

plugins:
  - serverless-deployment-bucket
#  - serverless-domain-manager

custom:
  hostedZone:
    name: 16geneticpersonalitytypes.com.
  domain:
    name: 16geneticpersonalitytypes.com
#  customDomain:
#    domainName: 16geneticpersonalitytypes.com
#    certificateName: 16geneticpersonalitytypes.com
#    basePath: ''
#    stage: ${self:provider.stage}
#    createRoute53Record: true

resources:
  Resources:

    CloudFrontDistribution: ${file(./CloudFrontDistribution.yml)}

    Route53RecordSet1:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !ImportValue HostedZones:16geneticpersonalitytypes
        Name: 16geneticpersonalitytypes.com
        Comment: Incoming email record for 16geneticpersonalitytypes
        Type: MX
        TTL: 60
        ResourceRecords:
          - !Sub 10 inbound-smtp.${param:region}.amazonaws.com

#    Route53RecordSet2:
#      Type: AWS::Route53::RecordSet
#      Properties:
#        HostedZoneName: 16geniuses.com.
#        Name: 16geniuses.com
#        Comment: Incoming email record for sub-domain
#        Type: MX
#        TTL: 60
#        ResourceRecords:
#          - 10 inbound-smtp.${param.region}.amazonaws.com

    Route53RecordSet3:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !ImportValue HostedZones:adm-1
        Name: adm-1.org
        Comment: Incoming email record for sub-domain
        Type: MX
        TTL: 900
        ResourceRecords:
          - !Sub 10 inbound-smtp.${param:region}.amazonaws.com

    SESReceiptRuleSet:
      Type: AWS::SES::ReceiptRuleSet
      Properties:
        RuleSetName: 'INBOUND'

    EmailRule1:
      Type: AWS::SES::ReceiptRule
      Properties:
        RuleSetName: !Ref SESReceiptRuleSet
        Rule:
          Name: '16geneticpersonalitytypes'
          Enabled: False
          Recipients:
            - 16geneticpersonalitytypes.com
          Actions:
            - S3Action:
                BucketName: ${param:bucket}

    EmailRule2:
      Type: AWS::SES::ReceiptRule
      Properties:
        RuleSetName: !Ref SESReceiptRuleSet
        Rule:
          Name: 16geniuses
          Enabled: True
          Recipients:
            - 16geniuses.com
          Actions:
            - S3Action:
                BucketName: ${param:bucket}
#            - LambdaAction:
#                FunctionArn:
#                  Fn::GetAtt:
#                    - ForwarderLambdaFunction
#                    - Arn

    EmailRule3:
      Type: AWS::SES::ReceiptRule
      Properties:
        RuleSetName: !Ref SESReceiptRuleSet
        Rule:
          Name: adm-1.org
          Enabled: True
          Recipients:
            - adm-1.org
          Actions:
            - S3Action:
                BucketName: ${param:bucket}

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${param:bucket}
        PolicyDocument:
          Statement:
            - Sid: "AllowSESPutObject"
              Effect: "Allow"
              Principal:
                Service: "ses.amazonaws.com"
              Action:
                - "s3:PutObject"
              Resource: arn:aws:s3:::${param:bucket}/*

    IAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: 16G-Serverless-Deployment-${param:region}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'cloudformation.amazonaws.com'
                  - 'lambda.amazonaws.com'
                  - edgelambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: ServerlessDeploymentPolicies-${param:region}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow   # Allow S3 actions to buckets with service prefix.
                  Resource:
                    - arn:aws:s3:::${param:bucket}*'
                    - arn:aws:lambda:::*
                  Action:
                    - 's3:*'
                    - 'lambda:*'
          - PolicyName: LambdaRole-${param:region}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow   # Allow all IAM actions to roles prefixed with service
                  Resource:
                    - !Sub 'arn:aws:iam::${AWS::AccountId}:role/16G-Serverless-Deployment-Role'
                  Action:
                    - 'iam:PassRole'

    SESEmailIdentity1:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: 16geneticpersonalitytypes.com
        MailFromAttributes:
          MailFromDomain: mail.16geneticpersonalitytypes.com
        DkimAttributes:
          SigningEnabled: true

#    SESEmailIdentity2:
#      Type: AWS::SES::EmailIdentity
#      Properties:
#        EmailIdentity: 16geniuses.com
#        MailFromAttributes:
#          MailFromDomain: mail.16geniuses.com
#        DkimAttributes:
#          SigningEnabled: true

    SESEmailIdentity3:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: adm-1.org
        MailFromAttributes:
          MailFromDomain: mail.adm-1.org
        DkimAttributes:
          SigningEnabled: true

    Route53RecordSetGroup1:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !ImportValue HostedZones:16geneticpersonalitytypes
        RecordSets:
          - Name: !GetAtt SESEmailIdentity1.DkimDNSTokenName1
            Type: CNAME
            TTL: '3600'
            ResourceRecords:
              - !GetAtt SESEmailIdentity1.DkimDNSTokenValue1
          - Name: !GetAtt SESEmailIdentity1.DkimDNSTokenName2
            Type: CNAME
            TTL: '3600'
            ResourceRecords:
              - !GetAtt SESEmailIdentity1.DkimDNSTokenValue2
          - Name: !GetAtt SESEmailIdentity1.DkimDNSTokenName3
            Type: CNAME
            TTL: '3600'
            ResourceRecords:
              - !GetAtt SESEmailIdentity1.DkimDNSTokenValue3

#    Route53RecordSetGroup2:
#      Type: AWS::Route53::RecordSetGroup
#      Properties:
#        HostedZoneId:
#          Ref: SESEmailIdentity2
#        RecordSets:
#          - Name: !GetAtt SESEmailIdentity2.DkimDNSTokenName1
#            Type: CNAME
#            TTL: '3600'
#            ResourceRecords:
#              - !GetAtt SESEmailIdentity2.DkimDNSTokenValue1
#          - Name: !GetAtt SESEmailIdentity2.DkimDNSTokenName2
#            Type: CNAME
#            TTL: '3600'
#            ResourceRecords:
#              - !GetAtt SESEmailIdentity2.DkimDNSTokenValue2
#          - Name: !GetAtt SESEmailIdentity2.DkimDNSTokenName3
#            Type: CNAME
#            TTL: '3600'
#            ResourceRecords:
#              - !GetAtt SESEmailIdentity2.DkimDNSTokenValue3

    Route53RecordSetGroup3:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId:
          Ref: SESEmailIdentity3
        RecordSets:
          - Name: !GetAtt SESEmailIdentity3.DkimDNSTokenName1
            Type: CNAME
            TTL: '3600'
            ResourceRecords:
              - !GetAtt SESEmailIdentity3.DkimDNSTokenValue1
          - Name: !GetAtt SESEmailIdentity3.DkimDNSTokenName2
            Type: CNAME
            TTL: '3600'
            ResourceRecords:
              - !GetAtt SESEmailIdentity3.DkimDNSTokenValue2
          - Name: !GetAtt SESEmailIdentity3.DkimDNSTokenName3
            Type: CNAME
            TTL: '3600'
            ResourceRecords:
              - !GetAtt SESEmailIdentity3.DkimDNSTokenValue3